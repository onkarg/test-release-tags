name: Release creator

on:
  workflow_dispatch:
    # version_name is used to create release branch (ex -> release/v1.1.1)
    inputs:
      version_name:
        type: string
        description: Please provide release version (ex 1.0.0, 1.1.0), the version is appended to the new release branch.
        required: true
    secrets:
      FLEET_RELEASE_SLACK_WEBHOOK:
        required: true
      AWS_ACCESS_KEY_ID_PROD:
        required: true
      AWS_SECRET_ACCESS_KEY_PROD:
        required: true
      NPM_TOKEN:
        required: true

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.get_branch_name.outputs.value }}
    steps:
      - name: Set branch name for output
        id: get_branch_name
        run: echo "::set-output name=value::release/v${{ github.event.inputs.version_name }}"

      # Log the release_tag
      - name: Dump GitHub context
        id: github_context_step
        run: echo '${{ steps.get_branch_name.outputs.value }}'

      # Checks out the default github branch
      - name: Check out code
        uses: actions/checkout@v2

      - name: Initialize mandatory git config
        run: |
          git config user.name "GitHub Actions"
          git config user.email "noreply@github.com"

      - name: Create and Push new branch
        run: |
          git checkout -b ${{ steps.get_branch_name.outputs.value }}
          git push origin ${{ steps.get_branch_name.outputs.value }}

      # We create a PR for release branch to only go into main,
      # once release is merged into main, we merge main into develop
      - name: Create pull request into main
        uses: thomaseizinger/create-pull-request@1.0.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          head: ${{ steps.get_branch_name.outputs.value }}
          base: main
          title: v${{ github.event.inputs.version_name }} into main
          reviewers: ${{ github.event.issue.user.login }}
          body: |
            This PR was created by Github Actions.

      # - name: Create pull request to develop
      #   uses: thomaseizinger/create-pull-request@1.0.0
      #   with:
      #       github-token: ${{ secrets.GITHUB_TOKEN }}
      #       head: ${{ steps.get_branch_name.outputs.value }}
      #       base: develop
      #       title: v${{ github.event.inputs.version_name }} into develop
      #       reviewers: ${{ github.event.issue.user.login }}
      #       body: |
      #         This PR was created by Github Actions.

  # push_tag_and_release:
  #   runs-on: ubuntu-latest
  #   needs: create_release_tag
  #   steps:
  #     # Check out code using git
  #     - uses: actions/checkout@v2
  #     # Install Node 12
  #     - uses: actions/setup-node@v1
  #       with:
  #         version: 12
  #     - run: npm install @octokit/action
  #     # Node.js script up push new tag and draft release
  #     - run: node ./.github/scripts/create-release.js
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         RELEASE_TAG: ${{ needs.create_release_tag.outputs.release_tag }}

  # deploy:
  #   name: Deploy latest release to US canary
  #   needs: [create_release_tag, push_tag_and_release]
  #   uses: nauto/web-apps/.github/workflows/deployment.yaml@develop
  #   with:
  #     BRANCH: develop
  #     BUCKET: nauto-prod-us-fleet-app-cloudfront-canary
  #     ADMIN_API_ROOT: https://admin-api.nauto.systems/v2.2
  #     BASE_ADMIN_API_ROOT: https://admin-api.nauto.systems
  #     SERVICES_API_ROOT: https://api.nauto.systems/v2.2
  #     BASE_SERVICES_API_ROOT: https://api.nauto.systems
  #     DISTRIBUTION_ID: E1Z5C4ONN6U969
  #     ENV: Canary
  #     OBJECT_NAME: 'dist'
  #     HAS_DOMAIN: true
  #   secrets:
  #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
  #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
  #     NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  # notify_slack:
  #   runs-on: ubuntu-latest
  #   if: always()
  #   needs: [create_release_tag, push_tag_and_release, deploy]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v2
  #     - uses: technote-space/workflow-conclusion-action@v2
  #     - name: Report status
  #       if: always()
  #       run: node ./.github/scripts/slack-release-notification.js
  #       env:
  #         FLEET_RELEASE_SLACK_WEBHOOK: ${{ secrets.FLEET_RELEASE_SLACK_WEBHOOK }}
  #         RELEASE_TAG: ${{ needs.create_release_tag.outputs.release_tag }}